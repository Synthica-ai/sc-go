name: 💫 CI

on:
  push:
    branches: [master]

jobs:
  test:
    name: ☔️ Tests
    runs-on: ubuntu-latest

    # Setup postgres service for tests
    services:
      db:
        image: postgres:14
        env:
          POSTGRES_DB: testing
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@master

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: ./server/go.mod

      - name: Run Tests
        env:
          GITHUB_ACTIONS: true
          POSTGRES_DB: testing
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
        run: |
          go test -v -parallel 1 $(go list -f '{{.Dir}}/...' -m | xargs)

  build_qa:
    name: 🔨 Build Binaries and Docker Image
    runs-on: ubuntu-22.04

    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@master

      - name: Add SHORT_SHA env property
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA::7}`" >> $GITHUB_ENV

      - name: Set build start in env variable
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Set current date as env variable
        run: echo "NOW=$(date +'%a, %d %b %Y %T %Z' )" >> $GITHUB_ENV

      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-color: 16776960
          embed-title: "${{ github.event.head_commit.message }}  •  ${{ env.SHORT_SHA}}"
          embed-description: "```Build Started```"
          embed-footer-text: "${{ env.NOW }}"

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: ./server/go.mod

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build GO Server Binary
        run: |
          cd server && go build -ldflags "-s -w -X main.Version=${GITHUB_SHA::7} -X \"main.CommitMsg=${{ github.event.head_commit.message }}\" \"-Xmain.BuildStart=${{ env.BUILD_START }}\"" -o server && cd ..

      - name: Build GO Cron Binary
        run: |
          cd cron && go build -ldflags "-s -w -X main.Version=${GITHUB_SHA::7} -X \"main.CommitMsg=${{ github.event.head_commit.message }}\"" -o cron && cd ..

      - name: Build and push image
        if: success()
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          file: ./Dockerfile.ci
          tags: stablecog/sc-server:${{ env.BRANCH_NAME }}-${{ env.GITHUB_RUN_ID }}

      - name: Discord Webhook Action
        if: failure()
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-color: 15548997
          embed-title: "${{ github.event.head_commit.message }}  •  ${{ env.SHORT_SHA}}"
          embed-description: "```🚨 Build FAILED 🚨```"
          embed-footer-text: "${{ env.NOW }}"

  deploy_server:
    name: 🚀 Deploy Server
    runs-on: ubuntu-22.04
    needs: build_qa
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@master

      - name: Add SHORT_SHA env property
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA::7}`" >> $GITHUB_ENV

      - name: Set current date as env variable
        run: echo "NOW=$(date +'%a, %d %b %Y %T %Z' )" >> $GITHUB_ENV

      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-color: 15105570
          embed-title: "${{ github.event.head_commit.message }}  •  ${{ env.SHORT_SHA}}"
          embed-description: "```Deploy Started```"
          embed-footer-text: "${{ env.NOW }}"

      - name: Configure AWS credentials
        if: success()
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - name: AWS Set Task Definition
        if: success()
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./aws/qa/sc-server.json
          container-name: main
          image: stablecog/sc-server:${{ env.BRANCH_NAME }}-${{ env.GITHUB_RUN_ID }}

      - name: AWS Deploy QA
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: qa-sc-server-Service-XSweBbsvI0JC
          cluster: qa-stablecog-Cluster-g4jXWMxvTvnZ
          wait-for-service-stability: true

      - name: Update current date as env variable
        run: echo "NOW=$(date +'%a, %d %b %Y %T %Z' )" >> $GITHUB_ENV

      - name: Discord Webhook Action
        if: failure()
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-color: 15548997
          embed-title: "${{ github.event.head_commit.message }}  •  ${{ env.SHORT_SHA}}"
          embed-description: "```🚨 Service Unstable 🚨```"
          embed-footer-text: "${{ env.NOW }}"

  deploy_cron:
    name: 🚀 Deploy Cron
    runs-on: ubuntu-22.04
    needs: build_qa
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@master

      - name: Configure AWS credentials
        if: success()
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - name: AWS Set Task Definition
        if: success()
        id: task-def-cron
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./aws/qa/sc-cron.json
          container-name: main
          image: stablecog/sc-server:${{ env.BRANCH_NAME }}-${{ env.GITHUB_RUN_ID }}

      - name: AWS Deploy QA
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-cron.outputs.task-definition }}
          service: qa-sc-cron
          cluster: qa-stablecog-Cluster-g4jXWMxvTvnZ
          wait-for-service-stability: true
