// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/upscalemodel"
)

// UpscaleModelCreate is the builder for creating a UpscaleModel entity.
type UpscaleModelCreate struct {
	config
	mutation *UpscaleModelMutation
	hooks    []Hook
}

// SetNameInWorker sets the "name_in_worker" field.
func (umc *UpscaleModelCreate) SetNameInWorker(s string) *UpscaleModelCreate {
	umc.mutation.SetNameInWorker(s)
	return umc
}

// SetIsActive sets the "is_active" field.
func (umc *UpscaleModelCreate) SetIsActive(b bool) *UpscaleModelCreate {
	umc.mutation.SetIsActive(b)
	return umc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableIsActive(b *bool) *UpscaleModelCreate {
	if b != nil {
		umc.SetIsActive(*b)
	}
	return umc
}

// SetIsDefault sets the "is_default" field.
func (umc *UpscaleModelCreate) SetIsDefault(b bool) *UpscaleModelCreate {
	umc.mutation.SetIsDefault(b)
	return umc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableIsDefault(b *bool) *UpscaleModelCreate {
	if b != nil {
		umc.SetIsDefault(*b)
	}
	return umc
}

// SetIsHidden sets the "is_hidden" field.
func (umc *UpscaleModelCreate) SetIsHidden(b bool) *UpscaleModelCreate {
	umc.mutation.SetIsHidden(b)
	return umc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableIsHidden(b *bool) *UpscaleModelCreate {
	if b != nil {
		umc.SetIsHidden(*b)
	}
	return umc
}

// SetCreatedAt sets the "created_at" field.
func (umc *UpscaleModelCreate) SetCreatedAt(t time.Time) *UpscaleModelCreate {
	umc.mutation.SetCreatedAt(t)
	return umc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableCreatedAt(t *time.Time) *UpscaleModelCreate {
	if t != nil {
		umc.SetCreatedAt(*t)
	}
	return umc
}

// SetUpdatedAt sets the "updated_at" field.
func (umc *UpscaleModelCreate) SetUpdatedAt(t time.Time) *UpscaleModelCreate {
	umc.mutation.SetUpdatedAt(t)
	return umc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableUpdatedAt(t *time.Time) *UpscaleModelCreate {
	if t != nil {
		umc.SetUpdatedAt(*t)
	}
	return umc
}

// SetID sets the "id" field.
func (umc *UpscaleModelCreate) SetID(u uuid.UUID) *UpscaleModelCreate {
	umc.mutation.SetID(u)
	return umc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (umc *UpscaleModelCreate) SetNillableID(u *uuid.UUID) *UpscaleModelCreate {
	if u != nil {
		umc.SetID(*u)
	}
	return umc
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (umc *UpscaleModelCreate) AddUpscaleIDs(ids ...uuid.UUID) *UpscaleModelCreate {
	umc.mutation.AddUpscaleIDs(ids...)
	return umc
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (umc *UpscaleModelCreate) AddUpscales(u ...*Upscale) *UpscaleModelCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return umc.AddUpscaleIDs(ids...)
}

// Mutation returns the UpscaleModelMutation object of the builder.
func (umc *UpscaleModelCreate) Mutation() *UpscaleModelMutation {
	return umc.mutation
}

// Save creates the UpscaleModel in the database.
func (umc *UpscaleModelCreate) Save(ctx context.Context) (*UpscaleModel, error) {
	umc.defaults()
	return withHooks[*UpscaleModel, UpscaleModelMutation](ctx, umc.sqlSave, umc.mutation, umc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UpscaleModelCreate) SaveX(ctx context.Context) *UpscaleModel {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UpscaleModelCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UpscaleModelCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umc *UpscaleModelCreate) defaults() {
	if _, ok := umc.mutation.IsActive(); !ok {
		v := upscalemodel.DefaultIsActive
		umc.mutation.SetIsActive(v)
	}
	if _, ok := umc.mutation.IsDefault(); !ok {
		v := upscalemodel.DefaultIsDefault
		umc.mutation.SetIsDefault(v)
	}
	if _, ok := umc.mutation.IsHidden(); !ok {
		v := upscalemodel.DefaultIsHidden
		umc.mutation.SetIsHidden(v)
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		v := upscalemodel.DefaultCreatedAt()
		umc.mutation.SetCreatedAt(v)
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		v := upscalemodel.DefaultUpdatedAt()
		umc.mutation.SetUpdatedAt(v)
	}
	if _, ok := umc.mutation.ID(); !ok {
		v := upscalemodel.DefaultID()
		umc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UpscaleModelCreate) check() error {
	if _, ok := umc.mutation.NameInWorker(); !ok {
		return &ValidationError{Name: "name_in_worker", err: errors.New(`ent: missing required field "UpscaleModel.name_in_worker"`)}
	}
	if _, ok := umc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "UpscaleModel.is_active"`)}
	}
	if _, ok := umc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "UpscaleModel.is_default"`)}
	}
	if _, ok := umc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "UpscaleModel.is_hidden"`)}
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UpscaleModel.created_at"`)}
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UpscaleModel.updated_at"`)}
	}
	return nil
}

func (umc *UpscaleModelCreate) sqlSave(ctx context.Context) (*UpscaleModel, error) {
	if err := umc.check(); err != nil {
		return nil, err
	}
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	umc.mutation.id = &_node.ID
	umc.mutation.done = true
	return _node, nil
}

func (umc *UpscaleModelCreate) createSpec() (*UpscaleModel, *sqlgraph.CreateSpec) {
	var (
		_node = &UpscaleModel{config: umc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: upscalemodel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: upscalemodel.FieldID,
			},
		}
	)
	if id, ok := umc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := umc.mutation.NameInWorker(); ok {
		_spec.SetField(upscalemodel.FieldNameInWorker, field.TypeString, value)
		_node.NameInWorker = value
	}
	if value, ok := umc.mutation.IsActive(); ok {
		_spec.SetField(upscalemodel.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := umc.mutation.IsDefault(); ok {
		_spec.SetField(upscalemodel.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := umc.mutation.IsHidden(); ok {
		_spec.SetField(upscalemodel.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := umc.mutation.CreatedAt(); ok {
		_spec.SetField(upscalemodel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := umc.mutation.UpdatedAt(); ok {
		_spec.SetField(upscalemodel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := umc.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upscalemodel.UpscalesTable,
			Columns: []string{upscalemodel.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: upscale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UpscaleModelCreateBulk is the builder for creating many UpscaleModel entities in bulk.
type UpscaleModelCreateBulk struct {
	config
	builders []*UpscaleModelCreate
}

// Save creates the UpscaleModel entities in the database.
func (umcb *UpscaleModelCreateBulk) Save(ctx context.Context) ([]*UpscaleModel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UpscaleModel, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpscaleModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UpscaleModelCreateBulk) SaveX(ctx context.Context) []*UpscaleModel {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UpscaleModelCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UpscaleModelCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}
