// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/disposableemail"
)

// DisposableEmailCreate is the builder for creating a DisposableEmail entity.
type DisposableEmailCreate struct {
	config
	mutation *DisposableEmailMutation
	hooks    []Hook
}

// SetDomain sets the "domain" field.
func (dec *DisposableEmailCreate) SetDomain(s string) *DisposableEmailCreate {
	dec.mutation.SetDomain(s)
	return dec
}

// SetCreatedAt sets the "created_at" field.
func (dec *DisposableEmailCreate) SetCreatedAt(t time.Time) *DisposableEmailCreate {
	dec.mutation.SetCreatedAt(t)
	return dec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dec *DisposableEmailCreate) SetNillableCreatedAt(t *time.Time) *DisposableEmailCreate {
	if t != nil {
		dec.SetCreatedAt(*t)
	}
	return dec
}

// SetUpdatedAt sets the "updated_at" field.
func (dec *DisposableEmailCreate) SetUpdatedAt(t time.Time) *DisposableEmailCreate {
	dec.mutation.SetUpdatedAt(t)
	return dec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dec *DisposableEmailCreate) SetNillableUpdatedAt(t *time.Time) *DisposableEmailCreate {
	if t != nil {
		dec.SetUpdatedAt(*t)
	}
	return dec
}

// SetID sets the "id" field.
func (dec *DisposableEmailCreate) SetID(u uuid.UUID) *DisposableEmailCreate {
	dec.mutation.SetID(u)
	return dec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dec *DisposableEmailCreate) SetNillableID(u *uuid.UUID) *DisposableEmailCreate {
	if u != nil {
		dec.SetID(*u)
	}
	return dec
}

// Mutation returns the DisposableEmailMutation object of the builder.
func (dec *DisposableEmailCreate) Mutation() *DisposableEmailMutation {
	return dec.mutation
}

// Save creates the DisposableEmail in the database.
func (dec *DisposableEmailCreate) Save(ctx context.Context) (*DisposableEmail, error) {
	dec.defaults()
	return withHooks[*DisposableEmail, DisposableEmailMutation](ctx, dec.sqlSave, dec.mutation, dec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dec *DisposableEmailCreate) SaveX(ctx context.Context) *DisposableEmail {
	v, err := dec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dec *DisposableEmailCreate) Exec(ctx context.Context) error {
	_, err := dec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dec *DisposableEmailCreate) ExecX(ctx context.Context) {
	if err := dec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dec *DisposableEmailCreate) defaults() {
	if _, ok := dec.mutation.CreatedAt(); !ok {
		v := disposableemail.DefaultCreatedAt()
		dec.mutation.SetCreatedAt(v)
	}
	if _, ok := dec.mutation.UpdatedAt(); !ok {
		v := disposableemail.DefaultUpdatedAt()
		dec.mutation.SetUpdatedAt(v)
	}
	if _, ok := dec.mutation.ID(); !ok {
		v := disposableemail.DefaultID()
		dec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dec *DisposableEmailCreate) check() error {
	if _, ok := dec.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "DisposableEmail.domain"`)}
	}
	if _, ok := dec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DisposableEmail.created_at"`)}
	}
	if _, ok := dec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DisposableEmail.updated_at"`)}
	}
	return nil
}

func (dec *DisposableEmailCreate) sqlSave(ctx context.Context) (*DisposableEmail, error) {
	if err := dec.check(); err != nil {
		return nil, err
	}
	_node, _spec := dec.createSpec()
	if err := sqlgraph.CreateNode(ctx, dec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dec.mutation.id = &_node.ID
	dec.mutation.done = true
	return _node, nil
}

func (dec *DisposableEmailCreate) createSpec() (*DisposableEmail, *sqlgraph.CreateSpec) {
	var (
		_node = &DisposableEmail{config: dec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: disposableemail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: disposableemail.FieldID,
			},
		}
	)
	if id, ok := dec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dec.mutation.Domain(); ok {
		_spec.SetField(disposableemail.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := dec.mutation.CreatedAt(); ok {
		_spec.SetField(disposableemail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dec.mutation.UpdatedAt(); ok {
		_spec.SetField(disposableemail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// DisposableEmailCreateBulk is the builder for creating many DisposableEmail entities in bulk.
type DisposableEmailCreateBulk struct {
	config
	builders []*DisposableEmailCreate
}

// Save creates the DisposableEmail entities in the database.
func (decb *DisposableEmailCreateBulk) Save(ctx context.Context) ([]*DisposableEmail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(decb.builders))
	nodes := make([]*DisposableEmail, len(decb.builders))
	mutators := make([]Mutator, len(decb.builders))
	for i := range decb.builders {
		func(i int, root context.Context) {
			builder := decb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DisposableEmailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, decb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, decb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, decb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (decb *DisposableEmailCreateBulk) SaveX(ctx context.Context) []*DisposableEmail {
	v, err := decb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (decb *DisposableEmailCreateBulk) Exec(ctx context.Context) error {
	_, err := decb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (decb *DisposableEmailCreateBulk) ExecX(ctx context.Context) {
	if err := decb.Exec(ctx); err != nil {
		panic(err)
	}
}
