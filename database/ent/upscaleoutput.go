// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/upscaleoutput"
)

// UpscaleOutput is the model entity for the UpscaleOutput schema.
type UpscaleOutput struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ImagePath holds the value of the "image_path" field.
	ImagePath string `json:"image_path,omitempty"`
	// UpscaleID holds the value of the "upscale_id" field.
	UpscaleID uuid.UUID `json:"upscale_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UpscaleOutputQuery when eager-loading is set.
	Edges UpscaleOutputEdges `json:"edges"`
}

// UpscaleOutputEdges holds the relations/edges for other nodes in the graph.
type UpscaleOutputEdges struct {
	// Upscales holds the value of the upscales edge.
	Upscales *Upscale `json:"upscales,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UpscalesOrErr returns the Upscales value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpscaleOutputEdges) UpscalesOrErr() (*Upscale, error) {
	if e.loadedTypes[0] {
		if e.Upscales == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: upscale.Label}
		}
		return e.Upscales, nil
	}
	return nil, &NotLoadedError{edge: "upscales"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpscaleOutput) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upscaleoutput.FieldImagePath:
			values[i] = new(sql.NullString)
		case upscaleoutput.FieldDeletedAt, upscaleoutput.FieldCreatedAt, upscaleoutput.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case upscaleoutput.FieldID, upscaleoutput.FieldUpscaleID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UpscaleOutput", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpscaleOutput fields.
func (uo *UpscaleOutput) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upscaleoutput.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				uo.ID = *value
			}
		case upscaleoutput.FieldImagePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_path", values[i])
			} else if value.Valid {
				uo.ImagePath = value.String
			}
		case upscaleoutput.FieldUpscaleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field upscale_id", values[i])
			} else if value != nil {
				uo.UpscaleID = *value
			}
		case upscaleoutput.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				uo.DeletedAt = new(time.Time)
				*uo.DeletedAt = value.Time
			}
		case upscaleoutput.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uo.CreatedAt = value.Time
			}
		case upscaleoutput.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uo.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUpscales queries the "upscales" edge of the UpscaleOutput entity.
func (uo *UpscaleOutput) QueryUpscales() *UpscaleQuery {
	return NewUpscaleOutputClient(uo.config).QueryUpscales(uo)
}

// Update returns a builder for updating this UpscaleOutput.
// Note that you need to call UpscaleOutput.Unwrap() before calling this method if this UpscaleOutput
// was returned from a transaction, and the transaction was committed or rolled back.
func (uo *UpscaleOutput) Update() *UpscaleOutputUpdateOne {
	return NewUpscaleOutputClient(uo.config).UpdateOne(uo)
}

// Unwrap unwraps the UpscaleOutput entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uo *UpscaleOutput) Unwrap() *UpscaleOutput {
	_tx, ok := uo.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpscaleOutput is not a transactional entity")
	}
	uo.config.driver = _tx.drv
	return uo
}

// String implements the fmt.Stringer.
func (uo *UpscaleOutput) String() string {
	var builder strings.Builder
	builder.WriteString("UpscaleOutput(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uo.ID))
	builder.WriteString("image_path=")
	builder.WriteString(uo.ImagePath)
	builder.WriteString(", ")
	builder.WriteString("upscale_id=")
	builder.WriteString(fmt.Sprintf("%v", uo.UpscaleID))
	builder.WriteString(", ")
	if v := uo.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(uo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uo.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpscaleOutputs is a parsable slice of UpscaleOutput.
type UpscaleOutputs []*UpscaleOutput

func (uo UpscaleOutputs) config(cfg config) {
	for _i := range uo {
		uo[_i].config = cfg
	}
}
